generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(uuid())
  name                 String
  email                String               @unique
  password             String
  role                 UserRole
  subrole              EmployeeSubrole?
  companyId            String?
  coins                Int?
  createdById          String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  targetActivityLogs   ActivityLog[]        @relation("TargetUserActivityLogs")
  activityLogs         ActivityLog[]        @relation("UserActivityLogs")
  sentTransactions     CoinTransaction[]    @relation("SentTransactions")
  receivedTransactions CoinTransaction[]    @relation("ReceivedTransactions")
  comments             Comment[]
  operatorPermissions  OperatorPermissions?
  verifiedSeals        Seal[]               @relation("SealVerifiedBy")
  createdSessions      Session[]            @relation("SessionCreatedBy")
  company              Company?             @relation(fields: [companyId], references: [id])
  createdBy            User?                @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers         User[]               @relation("UserCreatedBy")
  createdVehicles      Vehicle[]            @relation("VehicleCreatedBy")

  @@map("users")
}

model Company {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  address     String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companyType String?   @default("--Others--")
  documents   String[]
  gstin       String?
  isActive    Boolean   @default(true)
  logo        String?
  sessions    Session[]
  employees   User[]
  vehicles    Vehicle[]

  @@map("companies")
}

model CoinTransaction {
  id         String             @id @default(uuid())
  fromUserId String
  toUserId   String
  amount     Int
  reasonText String?
  reason     TransactionReason?
  createdAt  DateTime           @default(now())
  fromUser   User               @relation("SentTransactions", fields: [fromUserId], references: [id])
  toUser     User               @relation("ReceivedTransactions", fields: [toUserId], references: [id])

  @@map("coin_transactions")
}

model Session {
  id                   String        @id @default(uuid())
  createdAt            DateTime      @default(now())
  createdById          String
  companyId            String
  source               String
  destination          String
  status               SessionStatus @default(PENDING)
  transporterName      String?
  materialName         String?
  vehicleNumber        String?
  gpsImeiNumber        String?
  driverName           String?
  driverContactNumber  String?
  loaderName           String?
  challanRoyaltyNumber String?
  doNumber             String?
  freight              Float?
  qualityOfMaterials   String?
  tpNumber             String?
  grossWeight          Float?
  tareWeight           Float?
  netMaterialWeight    Float?
  loaderMobileNumber   String?
  loadingSite          String?
  receiverPartyName    String?
  cargoType            String?
  numberOfPackages     String?
  comments             Comment[]
  seal                 Seal?
  sealTags             SealTag[]
  company              Company       @relation(fields: [companyId], references: [id])
  createdBy            User          @relation("SessionCreatedBy", fields: [createdById], references: [id])

  @@map("sessions")
}

model Seal {
  id              String        @id @default(uuid())
  sessionId       String        @unique
  barcode         String
  scannedAt       DateTime?
  verified        Boolean       @default(false)
  verifiedById    String?
  status          String?
  statusComment   String?
  statusEvidence  Json?
  statusUpdatedAt DateTime?
  verificationData Json?        @default("{}")
  session         Session       @relation(fields: [sessionId], references: [id])
  verifiedBy      User?         @relation("SealVerifiedBy", fields: [verifiedById], references: [id])
  guardSealTags   GuardSealTag[]

  @@map("seals")
}

model Comment {
  id        String         @id @default(uuid())
  sessionId String
  userId    String
  message   String
  createdAt DateTime       @default(now())
  imageUrl  String?
  urgency   CommentUrgency @default(NA)
  session   Session        @relation(fields: [sessionId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@map("comments")
}

model ActivityLog {
  id                 String         @id @default(uuid())
  userId             String
  action             ActivityAction
  details            Json?
  targetUserId       String?
  targetResourceId   String?
  targetResourceType String?
  ipAddress          String?
  userAgent          String?
  createdAt          DateTime       @default(now())
  targetUser         User?          @relation("TargetUserActivityLogs", fields: [targetUserId], references: [id])
  user               User           @relation("UserActivityLogs", fields: [userId], references: [id])

  @@map("activity_logs")
}

model OperatorPermissions {
  id        String   @id @default(uuid())
  userId    String   @unique
  canCreate Boolean  @default(true)
  canModify Boolean  @default(false)
  canDelete Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("operator_permissions")
}

model Vehicle {
  id                      String        @id @default(uuid())
  numberPlate             String        @unique
  model                   String?
  manufacturer            String?
  yearOfMake              Int?
  status                  VehicleStatus @default(ACTIVE)
  companyId               String
  createdById             String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  registrationCertificate String?
  company                 Company       @relation(fields: [companyId], references: [id])
  createdBy               User          @relation("VehicleCreatedBy", fields: [createdById], references: [id])

  @@map("vehicles")
}

model SealTag {
  id            String   @id @default(uuid())
  barcode       String   @unique
  sessionId     String
  method        String
  imageUrl      String?
  createdAt     DateTime @default(now())
  session       Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("seal_tags")
}

model GuardSealTag {
  id            String   @id @default(uuid())
  barcode       String
  sealId        String
  method        String
  imageUrl      String?
  createdAt     DateTime @default(now())
  verified      Boolean  @default(false)
  seal          Seal     @relation(fields: [sealId], references: [id], onDelete: Cascade)

  @@unique([sealId, barcode])
  @@map("guard_seal_tags")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  COMPANY
  EMPLOYEE
}

enum EmployeeSubrole {
  OPERATOR
  DRIVER
  TRANSPORTER
  GUARD
}

enum SessionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TransactionReason {
  ADMIN_CREATION
  OPERATOR_CREATION
  COIN_ALLOCATION
  SESSION_CREATION
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  TRANSFER
  ALLOCATE
  VIEW
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum CommentUrgency {
  NA
  LOW
  MEDIUM
  HIGH
}
